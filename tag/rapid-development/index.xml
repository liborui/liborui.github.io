<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rapid Development | Borui&#39;s Homepage</title>
    <link>https://liborui.github.io/tag/rapid-development/</link>
      <atom:link href="https://liborui.github.io/tag/rapid-development/index.xml" rel="self" type="application/rss+xml" />
    <description>Rapid Development</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 27 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://liborui.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Rapid Development</title>
      <link>https://liborui.github.io/tag/rapid-development/</link>
    </image>
    
    <item>
      <title>AutoLink</title>
      <link>https://liborui.github.io/project/autolink/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://liborui.github.io/project/autolink/</guid>
      <description>&lt;p&gt;With the development of the IoT industry, developers are no longer content with just prototyping a valid system but eager to create a mature IoT system that explores low power consumption or high extensibility instead.&lt;/p&gt;
&lt;p&gt;Hence, we present AutoLink, an automatic generation system of IoT device platforms. Users may write AutoLink meta-program with an expressive syntax to specify their diverse requirements (e.g., battery lifetime, interface extensibility, execution time, and cost) of the generated IoT device platform. Taking the metaprogram as an input, AutoLink automatically transforms it into corresponding optimization problems and generates the optimal hardware conﬁguration that meets user requirements best. Towards this, AutoLink also offers a cross-platform, dutycycle-aware power model and a time model to estimate the lifetime and execution period of an IoT system. We implement AutoLink and evaluate its performance using real-world IoT applications. Results show that AutoLink generates the optimal hardware conﬁguration that meets diverse user requirements. Moreover, AutoLink achieves superior power estimation accuracy of IoT device platforms compared with the state-of-the-art approach.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TinyLink 2.0</title>
      <link>https://liborui.github.io/project/tinylink2.0/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://liborui.github.io/project/tinylink2.0/</guid>
      <description>&lt;p&gt;The recent years have witnessed the rapid growth of IoT (Internet of Things) applications.
A typical IoT application usually consists of three essential parts: the device side, the cloud side, and the client side.
The development of a complete IoT application is very difficult for non-expert developers because it involves drastically different technologies and complex interactions between different sides.&lt;/p&gt;
&lt;p&gt;Unlike traditional IoT development platforms which use separate approaches for these three sides, we present TinyLink 2.0, an integrated IoT development approach with a single coherent language.
It achieves high expressiveness for diverse IoT applications by an enhanced IFTTT rule design and a virtual sensor mechanism which helps developers express application logic with machine learning.
Moreover, TinyLink 2.0 optimizes the IoT application performance by using both static and dynamic optimizers, especially for resource-constrained IoT devices.&lt;/p&gt;
&lt;p&gt;We implement TinyLink 2.0 and evaluate it with eight case studies, a user study, and a detailed evaluation of the proposed programming language as well as the performance optimizers.
Results show that TinyLink 2.0 can speed up IoT development significantly compared with existing approaches from both industry and academia, while still achieving high expressiveness.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TinyLink</title>
      <link>https://liborui.github.io/project/tinylink/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://liborui.github.io/project/tinylink/</guid>
      <description>&lt;p&gt;Rapid development is essential for IoT (Internet of Things) application developers to obtain first-mover advantages and reduce the development cost.&lt;/p&gt;
&lt;p&gt;We present TinyLink (&lt;a href=&#34;http://tinylink.cn/TinyLink/view/en/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Home Page&lt;/a&gt;), a holistic system for rapid development of IoT applications.
The key idea of TinyLink is to use a top-down approach for designing both the hardware and the software of IoT applications.
Developers write the application code in a C-like language to specify the key logic of their applications, without dealing with the details of the specific hardware components.
Taking the application code as input, TinyLink automatically generates the hardware configuration as well as the binary program executable on the target hardware platform.
TinyLink provides unified APIs for applications to interact with the underlying hardware components.&lt;/p&gt;
&lt;p&gt;We implement TinyLink and evaluate its performance using realworld IoT applications.
Results show that: (1) TinyLink achieves rapid development of IoT applications, reducing 52.58% of lines of code in average compared with traditional approaches; (2) TinyLink searches a much larger design space and thus can generate a superior solution for the hardware configuration, compared with the state-of-the-art approach; (3) TinyLink incurs acceptable overhead in terms of execution time and program memory.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
